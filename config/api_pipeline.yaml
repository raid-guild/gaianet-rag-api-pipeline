version: "3.0.0"

api_name: "boardroom_api"

api_parameters:
  cname: "aave"
  protocol: "aave"

spec:
  type: Spec
  documentation_url: https://docs.airbyte.com/integrations/sources/boardroom
  connection_specification:
    $schema: http://json-schema.org/draft-07/schema#
    title: Boardroom API Spec
    type: object
    required:
      - api_key
      - cname
      - protocol
    additionalProperties: true
    properties:
      # 'TODO: This schema defines the configuration required for the source. This usually involves metadata such as database and/or authentication information.':
      api_key:
        type: string
        description: >-
          Boardroom API Key. See <a href="https://docs.boardroom.io/docs/api/05c1fb6d88a07-governance-api">here</a>
          for details.
        airbyte-secret: true
      cname:
        type: string
        description: >-
          Protocol ID a.k.a cname
        examples:
          - aave
          - hopprotocol
      protocol:
        type: string
        description: >-
          Alias for cname. Needed as there are a few endpoints that use `protocol` as parameter id
        examples:
          - aave
          - metacartel

definitions:
  selector:
    type: RecordSelector
    extractor:
      type: DpathExtractor
      field_path: []
  requester:
    type: HttpRequester
    url_base: "https://api.boardroom.info/v1"
    http_method: "GET"
    authenticator:
      type: ApiKeyAuthenticator
      api_token: "{{ config['api_key'] }}"
      inject_into:
        type: RequestOption
        field_name: "key"
        inject_into: request_parameter
  single_retriever:
    type: SimpleRetriever
    record_selector:
      $ref: "#/definitions/selector"
    paginator:
      type: NoPagination
    requester:
      $ref: "#/definitions/requester"
  retriever:
    type: SimpleRetriever
    record_selector:
      $ref: "#/definitions/selector"
    paginator:
      type: DefaultPaginator
      pagination_strategy:
        type: CursorPagination
        # page_size: "{{ config['page_size'] }}"
        # page_size: 100
        cursor_value: "{{ response.get('nextCursor', '') }}"
        stop_condition: "{{ 'nextCursor' not in response }}"
      # page_size_option:
      #   type: RequestOption
      #   field_name: "limit"
      #   inject_into: "request_parameter"
      page_token_option:
        type: RequestOption
        field_name: "cursor"
        inject_into: "request_parameter"
    requester:
      $ref: "#/definitions/requester"
  single_stream:
    type: DeclarativeStream
    retriever:
      $ref: "#/definitions/single_retriever"
  paging_stream:
    type: DeclarativeStream
    retriever:
      $ref: "#/definitions/retriever"

schemas:
  boardroom_api:
    type: object
    $schema: http://json-schema.org/draft-07/schema#
    properties:
      data:
        type: array
      nextCursor:
        type:
          - string
          - "null"
  boardroom_api_protocol:
    type: object
    $schema: http://json-schema.org/draft-07/schema#
    properties:
      data:
        type: object
      nextCursor:
        type:
          - "null"

api_config:
    request_method: "get"
    content_type: "application/json"
    response_entrypoint_field: "data"
    response_primary_key: "nextCursor"

endpoints:
  # "/delegates/getDelegatorsByProtocol/{cname}":
  #   id: "delegatorsByProtocol"
  #   responseSchema: "#/schemas/boardroom_api"
  # "/delegates/getDelegatedVotingPowerByProtocol/{protocol}":
  #   id: "getDelegatedVotingPowerByProtocol"
  #   responseSchema: "#/schemas/boardroom_api"
  /discourseTopics:
    id: "discourseTopics"
    responseSchema: "#/schemas/boardroom_api"
    textSchema:
      $ref: "#/textSchemas/DiscourseTopic"
  # /discourseCategories:
  #   id: "discourseCategories"
  #   responseSchema: "#/schemas/boardroom_api"
  #   textSchema:
  #     $ref: "#/textSchemas/DiscourseCategory"
  /discourseTopicPosts:
    id: "discourseTopicPosts"
    responseSchema: "#/schemas/boardroom_api"
    textSchema:
      $ref: "#/textSchemas/DiscourseTopicPost"
  "/protocols/{cname}":
    id: "protocol"
    responseSchema: "#/schemas/boardroom_api_protocol"
    textSchema:
      $ref: "#/textSchemas/Protocol"
  "/protocols/{cname}/proposals":
    id: "proposals"
    responseSchema: "#/schemas/boardroom_api"
    textSchema:
      $ref: "#/textSchemas/Proposal"
  # "/protocols/{cname}/voters":
  #   id: "voters"
  #   responseSchema: "#/schemas/boardroom_api"

textSchemas:
  Protocol:
    type: object
    properties:
      - cname:
          type: string
      - name:
          type: string
      - categories:
          type: array
          items:
            type: string
  Proposal:
    type: object
    properties:
      - title:
          type: string
      - content:
          type: string
      - summary:
          type: string
  DiscourseTopic:
    type: object
    properties:
      - title:
          type: string
  DiscourseCategory:
    type: object
    properties:
      - name:
          type: string
      - description:
          type: string
  DiscourseTopicPost:
    type: object
    properties:
      - body:
          type: string

chunking_param:
  mode: "elements"
  chunking_strategy: "by_title"
  include_orig_elements: true
  max_characters: 1500
  new_after_n_chars: 1024
  overlap: 0
  overlap_all: false
  combine_text_under_n_chars: 0
  multipage_sections: true
